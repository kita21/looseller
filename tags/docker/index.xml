<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on ゆるだら ブログ</title><link>https://looseller.com/tags/docker/</link><description>Recent content in Docker on ゆるだら ブログ</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Mon, 09 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://looseller.com/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>[Docker] マルチステージビルドって？</title><link>https://looseller.com/posts/002-multistage-build/</link><pubDate>Mon, 09 May 2022 00:00:00 +0000</pubDate><guid>https://looseller.com/posts/002-multistage-build/</guid><description>バックエンドエンジニアは、Dockerに触れる機会が多いと思います。Dockerを使用するにあたり必ずと言っていいほど必要になってくるのが、Dockerfileですね。 なんとなくDockerfileを使用していると気づかないうちにDockerイメージが大きくなってしまい、イメージの容量でPCがいっぱいいっぱいになってしまいます。 せっかくなのでこの記事を読んでDockerイメージを軽くしましょう！
Dockerイメージの容量を減らすことによるメリット PCなどのディスク容量を圧迫しない GCPやAWSなどのストレージ系料金を抑えられる Deploy時間を短縮できる Dockerイメージ小さくしたくなりましたか？したくなりましたね。 Dockerイメージを削減する方法で、COPYやRUNなどの記載を少なくし、レイヤーを削減する方法がありますが、
今回は一番効果の大きいマルチステージビルドを利用した方法を説明します。
まずは、公式のドキュメントです。
公式: マルチステージビルドの利用
んーわたし的にわかりやすく説明しようと思います。
Info マルチステージビルドの文法は Docker Engine 17.05 から導入されています。 例を記載しながら説明します。
今回の例はnpm, typescript, expressで記載されたバックエンドサーバーのプロジェクトとします。
package.jsonの例(他に多くのパッケージがありますが、省略しています)
{ &amp;#34;name&amp;#34;: &amp;#34;example&amp;#34;, &amp;#34;scripts&amp;#34;: { &amp;#34;build&amp;#34;: &amp;#34;rm -rf dist &amp;amp;&amp;amp; tsc&amp;#34;, &amp;#34;start&amp;#34;: &amp;#34;node dist/index.js&amp;#34;, }, &amp;#34;dependencies&amp;#34;: { &amp;#34;express&amp;#34;: &amp;#34;^4.18.1&amp;#34;, ... }, &amp;#34;devDependencies&amp;#34;: { &amp;#34;typescript&amp;#34;: &amp;#34;^4.6.4&amp;#34;, ... } } まず、マルチステージビルドを使用しないでDockerfileを記載してみます。</description></item></channel></rss>